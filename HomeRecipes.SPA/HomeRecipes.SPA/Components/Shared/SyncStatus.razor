@* @inject Data.SyncState SyncState
@inject Data.LocalRecipeStore LocalRecipeStore
@implements IDisposable

@if (isSyncing) {
    <span>Updating...</span>
} else if (lastSyncFailed) {
    <span>Could not sync. Unsent edits: @(outstandingEdits ?? 0) </span>
    <a class="toolbar-item toolbar-item-end toolbar-item-bg" @onclick="Synchronize">Retry</a>
} else {
    <span>Last updated: @GetLastUpdatedText()</span>
    <a class="toolbar-item toolbar-item-end" @onclick="Synchronize">Update</a>
}

@code {
    public bool isSyncing { get; set; }
    public bool lastSyncFailed { get; set; }
    public DateTime? lastUpdated { get; set; }
    public int? outstandingEdits { get; set; }

    [Parameter]
    public Action OnSyncComplete { get; set; }

    protected override async Task OnInitializedAsync() {
        SyncState.OnComplete += TriggerSyncComplete;
        await Synchronize();
        //return base.OnInitializedAsync();
    }

    async Task Synchronize() {
        isSyncing = true;
        lastSyncFailed = false;

        lastSyncFailed = await SyncState.Synchronize(LocalRecipeStore);
        StateHasChanged();
        // Even if we weren't able to reach the server, we can update status based on local data
        lastUpdated = await LocalRecipeStore.GetLastUpdateDateAsync();
        StateHasChanged();
        outstandingEdits = (await LocalRecipeStore.GetOutstandingLocalEditsAsync()).Length;
        StateHasChanged();

        isSyncing = false;
    }

    string GetLastUpdatedText() {
        if (lastUpdated.HasValue) {
            return lastUpdated.Value.Date == DateTime.Now.Date
                ? lastUpdated.Value.ToLocalTime().ToShortTimeString()
                : lastUpdated.Value.ToLocalTime().ToShortDateString();
        } else {
            return "Never";
        }
    }

    public void TriggerSyncComplete(){
        OnSyncComplete.Invoke();
    }

    public void Dispose() {
        SyncState.OnComplete -= TriggerSyncComplete;
    }
} *@