@using SIUnits;

<span class="ingredient-measurement">
    <span class="ingredient-measurement-quantity">@(new Fractional.Fractional(factoredQuantity, false).HumanRepresentation)</span>
    @if (factoredUnit == null) {
        if (!string.IsNullOrEmpty(UnitCallout)) {
            <small class="ingredient-measurement-unit">(@(UnitCallout?.ToLower()))</small>
        }
    } else {
        <abbr class="ingredient-measurement-unit" title="@(factoredUnit.Name)" data-is-siunit>@(factoredUnit.Symbol)</abbr>
    }
</span>
@code {
    [Parameter]
    public double ServingModifier { get; set; }

    [Parameter]
    public decimal QuantityCallout { get; set; }

    [Parameter]
    public string UnitCallout { get; set; }

    private decimal servingQuantity => UnitCallout?.Equals("to taste", StringComparison.OrdinalIgnoreCase) == true ? QuantityCallout : QuantityCallout * (decimal)ServingModifier;

    private decimal factoredQuantity { get; set; }

    private SIUnits.Abstracts.BaseUnit factoredUnit { get; set; }

    protected override void OnParametersSet() {
        SIUnits.Abstracts.BaseUnit initialUnit = SIUnits.UnitManager.GetUnit(UnitCallout);
        factoredUnit = GetFactoredUnit(servingQuantity, UnitCallout);

        if (factoredUnit != null && factoredUnit.Symbol != initialUnit?.Symbol) {
            decimal? convertedQuantity = default;
            try {
                convertedQuantity = SIUnits.UnitManager.Convert(initialUnit.Format(servingQuantity), factoredUnit.Symbol);
            } catch (Exception ex) {

            }
            if (convertedQuantity.HasValue) {
                factoredQuantity = convertedQuantity.Value;
            } else {
                factoredQuantity = servingQuantity;
            }
        } else {
            factoredUnit = initialUnit;
            factoredQuantity = servingQuantity;
        }
    }

    //protected override void OnInitialized() {

    //}

    private SIUnits.Abstracts.BaseUnit GetFactoredUnit(decimal quantity, string unitCallout) {
        var unit = SIUnits.UnitManager.GetUnit(unitCallout);

        SIUnits.Abstracts.BaseUnit convertToUnit = unit;
        switch (unit?.Name) {
            case "Teaspoon":
                if (quantity >= 3) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Tablespoon");
                }
                break;
            case "Tablespoon":
                if (quantity < (1 / 4)) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Teaspoon");
                } else if (quantity >= 4) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Cup");
                }
                break;
            case "Cup":
                if (quantity < (1 / 4)) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Tablespoon");
                } else if (quantity >= 2) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Pint");
                }
                break;
            case "Pint":
                if (quantity < 1) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Cup");
                } else if (quantity >= 2) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Quart");
                }
                break;
            case "Quart":
                if (quantity < 1) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Pint");
                } else if (quantity >= 4) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Gallon");
                }
                break;
            case "Pound":
                if (quantity < (1 / 4)) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Ounce");
                }
                break;
            default:
                break;
        }
        if (convertToUnit != null && convertToUnit.Symbol != unit.Symbol) {
            decimal? convertedQuantity = default;
            try {
                convertedQuantity = SIUnits.UnitManager.Convert(unit.Format(quantity), convertToUnit.Symbol);
            } catch (Exception ex) {

            }
            if (convertedQuantity.HasValue) {
                if (convertedQuantity.Value > 0) {
                    return GetFactoredUnit(convertedQuantity.Value, convertToUnit.Name);
                } else {
                    return convertToUnit;
                }
            }
        }
        return unit;
    }
    public static string HumanizeIngredientUnits(decimal quantity, string unitName) {
        Fractional.Fractional fraction = new Fractional.Fractional(quantity, false);
        var unit = SIUnits.UnitManager.GetUnit(unitName);
        if (unit == null) {
            if (!string.IsNullOrEmpty(unitName)) {
                return $"{fraction.HumanRepresentation} ({unitName.ToLower()})";
            } else {
                return $"{fraction.HumanRepresentation}";
            }
        } else {
            return $"{fraction.HumanRepresentation} {unit.Symbol}";
        }

        SIUnits.Abstracts.BaseUnit convertToUnit = unit;
        switch (unit.Name) {
            case "Teaspoon":
                if (quantity >= 3) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Tablespoon");
                }
                break;
            case "Tablespoon":
                if (quantity < (1 / 3)) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Teaspoon");
                } else if (quantity >= 4) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Cup");
                }
                break;
            case "Cup":
                if (quantity < (1 / 4)) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Tablespoon");
                } else if (quantity >= 2) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Pint");
                }
                break;
            case "Pint":
                if (quantity < 1) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Cup");
                } else if (quantity >= 2) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Quart");
                }
                break;
            case "Quart":
                if (quantity < 1) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Pint");
                } else if (quantity >= 4) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Gallon");
                }
                break;
            case "Pound":
                if (quantity < (1 / 4)) {
                    convertToUnit = SIUnits.UnitManager.GetUnit("Ounce");
                }
                break;
            default:
                break;
        }
        if (convertToUnit != null && convertToUnit.Symbol != unit.Symbol) {
            decimal? convertedQuantity = default;
            try {
                convertedQuantity = SIUnits.UnitManager.Convert(unit.Format(quantity), convertToUnit.Symbol);
            } catch (Exception ex) {

            }
            if (convertedQuantity.HasValue) {
                if (convertedQuantity.Value > 0) {
                    return HumanizeIngredientUnits(convertedQuantity.Value, convertToUnit.Name);
                } else {
                    fraction = new Fractional.Fractional(convertedQuantity.Value, false);
                    return $"{fraction.HumanRepresentation} {convertToUnit.Symbol}";// convertToUnit.Format(convertedQuantity.GetValueOrDefault());
                }
            }
        }
        return $"{fraction.HumanRepresentation} {unit.Symbol}";
    }
}
